#pragma once
#include <unordered_map>
#include <thread>
#include <regex>
#include <map>
#include <functional>
#include <boost/asio.hpp>
#include <vector>
#include <ostream>

namespace WebServerBase{
	
	struct Request {
		// ?????(post, get), ????¡¤??, http?·Ú
		std::string method, path, http_version;
		
		std::shared_ptr<std::istream> content;

		std::unordered_map<std::string, std::string> header;
		// ?????????????¡¤?????
		std::smatch path_match;

	};

	typedef std::map < std::string, std::unordered_map < std::string,
		std::function<void(std::ostream&, Request& )> > > resource_type;


	// http or https
	template<typename socket_type>
	class ServerBase
	{
	public:
		explicit ServerBase(unsigned short port, size_t num_threads = 1);

		virtual ~ServerBase();
		// ??????????
		void start();
		void hehehe() = delete;

	protected:

		virtual void accept();
		// implemention request and reponse
		void process_request_and_responce(std::shared_ptr<socket_type> socket) const;
	
		Request prase_Request(std::istream& stream) const;
	public:
		// ???????????????????????
		resource_type resource;
		// ?????????????????????
		resource_type default_resource;

	protected:
		// ????????????????????????????start?§Õ???
		std::vector<resource_type::iterator> all_resources;
		/*
		asio ???§Ö? io_service ????????????§Ö??? IO ????????????????????
		??? IO ?????????????????????????? io_service ????
		*/
		boost::asio::io_service m_io_service;
		// IP ??????????§¿???·Ú??????? endpoint??????????? endpoint ???????????
		boost::asio::ip::tcp::endpoint endpoint;
		// tcp::acceptor ?????????????????????? ???????io_service ??endpoing????????
		boost::asio::ip::tcp::acceptor acceptor;

		size_t num_threads;

		std::vector<std::thread> threads;
		
	};

	
}


